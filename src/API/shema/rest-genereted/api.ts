/* tslint:disable */
/* eslint-disable */
/**
 * ETF Exchange TON Fund API
 * API для взаимодействия с ETF Exchange TON Fund
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ControllersAppOpenedResponse
 */
export interface ControllersAppOpenedResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersAppOpenedResponse
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface ControllersBuyIndexData
 */
export interface ControllersBuyIndexData {
    /**
     * 
     * @type {number}
     * @memberof ControllersBuyIndexData
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ControllersBuyIndexData
     */
    'fund_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersBuyIndexData
     */
    'init_data'?: string;
    /**
     * 
     * @type {number}
     * @memberof ControllersBuyIndexData
     */
    'telegram_id'?: number;
}
/**
 * 
 * @export
 * @interface ControllersBuyIndexResponse
 */
export interface ControllersBuyIndexResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersBuyIndexResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ControllersBuyIndexResponse
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ControllersBuyIndexResponse
     */
    'transaction'?: string;
}
/**
 * 
 * @export
 * @interface ControllersCompleteTaskRequest
 */
export interface ControllersCompleteTaskRequest {
    /**
     * 
     * @type {string}
     * @memberof ControllersCompleteTaskRequest
     */
    'init_data'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersCompleteTaskRequest
     */
    'task_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ControllersCompleteTaskRequest
     */
    'telegram_id'?: number;
}
/**
 * 
 * @export
 * @interface ControllersCompleteTaskResponse
 */
export interface ControllersCompleteTaskResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersCompleteTaskResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ControllersCompleteTaskResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface ControllersDepositResponse
 */
export interface ControllersDepositResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersDepositResponse
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersDepositResponse
     */
    'memo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersDepositResponse
     */
    'qrimgsrc'?: string;
}
/**
 * 
 * @export
 * @interface ControllersSellIndexRequest
 */
export interface ControllersSellIndexRequest {
    /**
     * 
     * @type {number}
     * @memberof ControllersSellIndexRequest
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ControllersSellIndexRequest
     */
    'fund_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersSellIndexRequest
     */
    'init_data'?: string;
    /**
     * 
     * @type {number}
     * @memberof ControllersSellIndexRequest
     */
    'telegram_id'?: number;
}
/**
 * 
 * @export
 * @interface ControllersSellIndexResponse
 */
export interface ControllersSellIndexResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersSellIndexResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ControllersSellIndexResponse
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ControllersSellIndexResponse
     */
    'transaction'?: string;
}
/**
 * 
 * @export
 * @interface ControllersWithdrawData
 */
export interface ControllersWithdrawData {
    /**
     * 
     * @type {string}
     * @memberof ControllersWithdrawData
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof ControllersWithdrawData
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ControllersWithdrawData
     */
    'asset'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersWithdrawData
     */
    'init_data'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersWithdrawData
     */
    'memo'?: string;
    /**
     * 
     * @type {number}
     * @memberof ControllersWithdrawData
     */
    'telegram_id'?: number;
}
/**
 * 
 * @export
 * @interface ControllersWithdrawResponse
 */
export interface ControllersWithdrawResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersWithdrawResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ControllersWithdrawResponse
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ControllersWithdrawResponse
     */
    'transaction'?: string;
}
/**
 * 
 * @export
 * @interface ModelsAsset
 */
export interface ModelsAsset {
    /**
     * 
     * @type {string}
     * @memberof ModelsAsset
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAsset
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAsset
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAsset
     */
    'image_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAsset
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAsset
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsAsset
     */
    'ticker'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAsset
     */
    'withdrawal_fee'?: number;
}
/**
 * 
 * @export
 * @interface ModelsAssetBalance
 */
export interface ModelsAssetBalance {
    /**
     * 
     * @type {number}
     * @memberof ModelsAssetBalance
     */
    'balance'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsAssetBalance
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAssetBalance
     */
    'image_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAssetBalance
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAssetBalance
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsAssetBalance
     */
    'symbol'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAssetBalance
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface ModelsFund
 */
export interface ModelsFund {
    /**
     * 
     * @type {Array<ModelsFundAsset>}
     * @memberof ModelsFund
     */
    'assets'?: Array<ModelsFundAsset>;
    /**
     * 
     * @type {string}
     * @memberof ModelsFund
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFund
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFund
     */
    'image_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsFund
     */
    'is_avaiable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsFund
     */
    'is_dao'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelsFund
     */
    'management_fee'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsFund
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFund
     */
    'ptonAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFund
     */
    'risk_score'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFund
     */
    'updated_event'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsFund
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface ModelsFundAsset
 */
export interface ModelsFundAsset {
    /**
     * 
     * @type {number}
     * @memberof ModelsFundAsset
     */
    'allocation_percentage'?: number;
    /**
     * 
     * @type {ModelsAsset}
     * @memberof ModelsFundAsset
     */
    'asset'?: ModelsAsset;
    /**
     * 
     * @type {string}
     * @memberof ModelsFundAsset
     */
    'contractAddress'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsFundAsset
     */
    'routerVersion'?: number;
}
/**
 * 
 * @export
 * @interface ModelsFundStats
 */
export interface ModelsFundStats {
    /**
     * 
     * @type {number}
     * @memberof ModelsFundStats
     */
    'holders'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsFundStats
     */
    'tvl'?: number;
}
/**
 * 
 * @export
 * @interface ModelsNetwork
 */
export interface ModelsNetwork {
    /**
     * 
     * @type {number}
     * @memberof ModelsNetwork
     */
    'created_at'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsNetwork
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsNetwork
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsNetwork
     */
    'image_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsNetwork
     */
    'isTestnet'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsNetwork
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsNetwork
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface ModelsNews
 */
export interface ModelsNews {
    /**
     * 
     * @type {string}
     * @memberof ModelsNews
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsNews
     */
    'published_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsNews
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsNews
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface ModelsResponseError
 */
export interface ModelsResponseError {
    /**
     * 
     * @type {string}
     * @memberof ModelsResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ModelsTask
 */
export interface ModelsTask {
    /**
     * 
     * @type {number}
     * @memberof ModelsTask
     */
    'channelID'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsTask
     */
    'completed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsTask
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsTask
     */
    'reward'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsTask
     */
    'telegramID'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsTask
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTask
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ModelsTransaction
 */
export interface ModelsTransaction {
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsTransaction
     */
    'amount'?: number;
    /**
     * 
     * @type {ModelsAsset}
     * @memberof ModelsTransaction
     */
    'asset'?: ModelsAsset;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'tx'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsTransaction
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUser
     */
    'memo'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsUser
     */
    'telegram_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ModelsWallet
 */
export interface ModelsWallet {
    /**
     * 
     * @type {string}
     * @memberof ModelsWallet
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsWallet
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsWallet
     */
    'network_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsWallet
     */
    'secretKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsWallet
     */
    'userID'?: string;
}
/**
 * 
 * @export
 * @interface ModelsWalletBalance
 */
export interface ModelsWalletBalance {
    /**
     * 
     * @type {Array<ModelsAssetBalance>}
     * @memberof ModelsWalletBalance
     */
    'assets'?: Array<ModelsAssetBalance>;
    /**
     * 
     * @type {number}
     * @memberof ModelsWalletBalance
     */
    'total'?: number;
}

/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить список сетей для указанного актива
         * @summary Get networks for an asset
         * @param {string} assetName Название актива
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsAssetNameNetworksGet: async (assetName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetName' is not null or undefined
            assertParamExists('assetsAssetNameNetworksGet', 'assetName', assetName)
            const localVarPath = `/assets/{assetName}/networks`
                .replace(`{${"assetName"}}`, encodeURIComponent(String(assetName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список всех активов
         * @summary Get all assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить список сетей для указанного актива
         * @summary Get networks for an asset
         * @param {string} assetName Название актива
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetsAssetNameNetworksGet(assetName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsNetwork>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetsAssetNameNetworksGet(assetName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.assetsAssetNameNetworksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить список всех активов
         * @summary Get all assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsAsset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.assetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetsApiFp(configuration)
    return {
        /**
         * Получить список сетей для указанного актива
         * @summary Get networks for an asset
         * @param {string} assetName Название актива
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsAssetNameNetworksGet(assetName: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsNetwork>> {
            return localVarFp.assetsAssetNameNetworksGet(assetName, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список всех активов
         * @summary Get all assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsAsset>> {
            return localVarFp.assetsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
    /**
     * Получить список сетей для указанного актива
     * @summary Get networks for an asset
     * @param {string} assetName Название актива
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetsAssetNameNetworksGet(assetName: string, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).assetsAssetNameNetworksGet(assetName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список всех активов
     * @summary Get all assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetsGet(options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).assetsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DepositApi - axios parameter creator
 * @export
 */
export const DepositApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить адрес для депозита по Telegram ID пользователя
         * @summary Get deposit address
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositGet: async (telegramId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramId' is not null or undefined
            assertParamExists('depositGet', 'telegramId', telegramId)
            const localVarPath = `/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telegramId !== undefined) {
                localVarQueryParameter['telegram_id'] = telegramId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepositApi - functional programming interface
 * @export
 */
export const DepositApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepositApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить адрес для депозита по Telegram ID пользователя
         * @summary Get deposit address
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositGet(telegramId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersDepositResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositGet(telegramId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepositApi.depositGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DepositApi - factory interface
 * @export
 */
export const DepositApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepositApiFp(configuration)
    return {
        /**
         * Получить адрес для депозита по Telegram ID пользователя
         * @summary Get deposit address
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositGet(telegramId: number, options?: RawAxiosRequestConfig): AxiosPromise<ControllersDepositResponse> {
            return localVarFp.depositGet(telegramId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepositApi - object-oriented interface
 * @export
 * @class DepositApi
 * @extends {BaseAPI}
 */
export class DepositApi extends BaseAPI {
    /**
     * Получить адрес для депозита по Telegram ID пользователя
     * @summary Get deposit address
     * @param {number} telegramId Telegram ID пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepositApi
     */
    public depositGet(telegramId: number, options?: RawAxiosRequestConfig) {
        return DepositApiFp(this.configuration).depositGet(telegramId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FundStatsApi - axios parameter creator
 * @export
 */
export const FundStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить общую информацию о фонде
         * @summary Get fund information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundinfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fundinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundStatsApi - functional programming interface
 * @export
 */
export const FundStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FundStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить общую информацию о фонде
         * @summary Get fund information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fundinfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsFundStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fundinfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundStatsApi.fundinfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FundStatsApi - factory interface
 * @export
 */
export const FundStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FundStatsApiFp(configuration)
    return {
        /**
         * Получить общую информацию о фонде
         * @summary Get fund information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundinfoGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsFundStats> {
            return localVarFp.fundinfoGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FundStatsApi - object-oriented interface
 * @export
 * @class FundStatsApi
 * @extends {BaseAPI}
 */
export class FundStatsApi extends BaseAPI {
    /**
     * Получить общую информацию о фонде
     * @summary Get fund information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundStatsApi
     */
    public fundinfoGet(options?: RawAxiosRequestConfig) {
        return FundStatsApiFp(this.configuration).fundinfoGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FundsApi - axios parameter creator
 * @export
 */
export const FundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить информацию о фонде по его идентификатору
         * @summary Get fund by ID
         * @param {string} fundId Идентификатор фонда
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundFundIdGet: async (fundId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fundId' is not null or undefined
            assertParamExists('fundFundIdGet', 'fundId', fundId)
            const localVarPath = `/fund/{fund_id}`
                .replace(`{${"fund_id"}}`, encodeURIComponent(String(fundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список всех фондов
         * @summary Get all funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/funds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundsApi - functional programming interface
 * @export
 */
export const FundsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FundsApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить информацию о фонде по его идентификатору
         * @summary Get fund by ID
         * @param {string} fundId Идентификатор фонда
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fundFundIdGet(fundId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsFund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fundFundIdGet(fundId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundsApi.fundFundIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить список всех фондов
         * @summary Get all funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fundsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsFund>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fundsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundsApi.fundsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FundsApi - factory interface
 * @export
 */
export const FundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FundsApiFp(configuration)
    return {
        /**
         * Получить информацию о фонде по его идентификатору
         * @summary Get fund by ID
         * @param {string} fundId Идентификатор фонда
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundFundIdGet(fundId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsFund> {
            return localVarFp.fundFundIdGet(fundId, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список всех фондов
         * @summary Get all funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsFund>> {
            return localVarFp.fundsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FundsApi - object-oriented interface
 * @export
 * @class FundsApi
 * @extends {BaseAPI}
 */
export class FundsApi extends BaseAPI {
    /**
     * Получить информацию о фонде по его идентификатору
     * @summary Get fund by ID
     * @param {string} fundId Идентификатор фонда
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public fundFundIdGet(fundId: string, options?: RawAxiosRequestConfig) {
        return FundsApiFp(this.configuration).fundFundIdGet(fundId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список всех фондов
     * @summary Get all funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public fundsGet(options?: RawAxiosRequestConfig) {
        return FundsApiFp(this.configuration).fundsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить список последних новостей
         * @summary Get latest news
         * @param {number} [count] Количество новостей (по умолчанию 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsGet: async (count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить список последних новостей
         * @summary Get latest news
         * @param {number} [count] Количество новостей (по умолчанию 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsGet(count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsNews>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsGet(count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NewsApi.newsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsApiFp(configuration)
    return {
        /**
         * Получить список последних новостей
         * @summary Get latest news
         * @param {number} [count] Количество новостей (по умолчанию 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsGet(count?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsNews>> {
            return localVarFp.newsGet(count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI {
    /**
     * Получить список последних новостей
     * @summary Get latest news
     * @param {number} [count] Количество новостей (по умолчанию 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsGet(count?: number, options?: RawAxiosRequestConfig) {
        return NewsApiFp(this.configuration).newsGet(count, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Завершить задачу для пользователя
         * @summary Complete a task
         * @param {ControllersCompleteTaskRequest} body Запрос на завершение задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksCompletePost: async (body: ControllersCompleteTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tasksCompletePost', 'body', body)
            const localVarPath = `/tasks/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список задач для указанного пользователя
         * @summary Get tasks for a user
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet: async (telegramId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramId' is not null or undefined
            assertParamExists('tasksGet', 'telegramId', telegramId)
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telegramId !== undefined) {
                localVarQueryParameter['telegram_id'] = telegramId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Завершить задачу для пользователя
         * @summary Complete a task
         * @param {ControllersCompleteTaskRequest} body Запрос на завершение задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksCompletePost(body: ControllersCompleteTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersCompleteTaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksCompletePost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.tasksCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить список задач для указанного пользователя
         * @summary Get tasks for a user
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksGet(telegramId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksGet(telegramId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.tasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Завершить задачу для пользователя
         * @summary Complete a task
         * @param {ControllersCompleteTaskRequest} body Запрос на завершение задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksCompletePost(body: ControllersCompleteTaskRequest, options?: RawAxiosRequestConfig): AxiosPromise<ControllersCompleteTaskResponse> {
            return localVarFp.tasksCompletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список задач для указанного пользователя
         * @summary Get tasks for a user
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet(telegramId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsTask>> {
            return localVarFp.tasksGet(telegramId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * Завершить задачу для пользователя
     * @summary Complete a task
     * @param {ControllersCompleteTaskRequest} body Запрос на завершение задачи
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksCompletePost(body: ControllersCompleteTaskRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).tasksCompletePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список задач для указанного пользователя
     * @summary Get tasks for a user
     * @param {number} telegramId Telegram ID пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksGet(telegramId: number, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).tasksGet(telegramId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Регистрирует или обновляет пользователя при открытии приложения
         * @summary App opened
         * @param {ModelsUser} body Данные пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appopenedPost: async (body: ModelsUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('appopenedPost', 'body', body)
            const localVarPath = `/appopened`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список всех пользователей
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Регистрирует или обновляет пользователя при открытии приложения
         * @summary App opened
         * @param {ModelsUser} body Данные пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appopenedPost(body: ModelsUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAppOpenedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appopenedPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.appopenedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить список всех пользователей
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Регистрирует или обновляет пользователя при открытии приложения
         * @summary App opened
         * @param {ModelsUser} body Данные пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appopenedPost(body: ModelsUser, options?: RawAxiosRequestConfig): AxiosPromise<ControllersAppOpenedResponse> {
            return localVarFp.appopenedPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список всех пользователей
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsUser>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Регистрирует или обновляет пользователя при открытии приложения
     * @summary App opened
     * @param {ModelsUser} body Данные пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public appopenedPost(body: ModelsUser, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).appopenedPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список всех пользователей
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WalletsApi - axios parameter creator
 * @export
 */
export const WalletsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить баланс кошелька пользователя
         * @summary Get wallet balance
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBalanceGet: async (telegramId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramId' is not null or undefined
            assertParamExists('walletBalanceGet', 'telegramId', telegramId)
            const localVarPath = `/wallet/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telegramId !== undefined) {
                localVarQueryParameter['telegram_id'] = telegramId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Купить индекс для пользователя
         * @summary Buy index
         * @param {ControllersBuyIndexData} body Запрос на покупку индекса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBuyindexPost: async (body: ControllersBuyIndexData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('walletBuyindexPost', 'body', body)
            const localVarPath = `/wallet/buyindex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить средства пользователя из кошелька
         * @summary Get wallet funds
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletFundsGet: async (telegramId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramId' is not null or undefined
            assertParamExists('walletFundsGet', 'telegramId', telegramId)
            const localVarPath = `/wallet/funds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telegramId !== undefined) {
                localVarQueryParameter['telegram_id'] = telegramId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Продать индекс для пользователя
         * @summary Sell index
         * @param {ControllersSellIndexRequest} body Запрос на продажу индекса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletSellindexPost: async (body: ControllersSellIndexRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('walletSellindexPost', 'body', body)
            const localVarPath = `/wallet/sellindex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить транзакции пользователя
         * @summary Get wallet transactions
         * @param {number} telegramId Telegram ID пользователя
         * @param {number} [limit] Максимальное количество транзакций (по умолчанию 20)
         * @param {number} [offset] Смещение для пагинации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionsGet: async (telegramId: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramId' is not null or undefined
            assertParamExists('walletTransactionsGet', 'telegramId', telegramId)
            const localVarPath = `/wallet/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (telegramId !== undefined) {
                localVarQueryParameter['telegram_id'] = telegramId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список кошельков пользователя
         * @summary Get user wallets
         * @param {string} userId Идентификатор пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletsUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('walletsUserIdGet', 'userId', userId)
            const localVarPath = `/wallets/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Вывести средства с кошелька пользователя
         * @summary Withdraw funds
         * @param {ControllersWithdrawData} body Запрос на вывод средств
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawPost: async (body: ControllersWithdrawData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('withdrawPost', 'body', body)
            const localVarPath = `/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletsApi - functional programming interface
 * @export
 */
export const WalletsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletsApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить баланс кошелька пользователя
         * @summary Get wallet balance
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletBalanceGet(telegramId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsWalletBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletBalanceGet(telegramId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.walletBalanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Купить индекс для пользователя
         * @summary Buy index
         * @param {ControllersBuyIndexData} body Запрос на покупку индекса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletBuyindexPost(body: ControllersBuyIndexData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersBuyIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletBuyindexPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.walletBuyindexPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить средства пользователя из кошелька
         * @summary Get wallet funds
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletFundsGet(telegramId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsFund>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletFundsGet(telegramId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.walletFundsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Продать индекс для пользователя
         * @summary Sell index
         * @param {ControllersSellIndexRequest} body Запрос на продажу индекса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletSellindexPost(body: ControllersSellIndexRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSellIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletSellindexPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.walletSellindexPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить транзакции пользователя
         * @summary Get wallet transactions
         * @param {number} telegramId Telegram ID пользователя
         * @param {number} [limit] Максимальное количество транзакций (по умолчанию 20)
         * @param {number} [offset] Смещение для пагинации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletTransactionsGet(telegramId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsTransaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionsGet(telegramId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.walletTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить список кошельков пользователя
         * @summary Get user wallets
         * @param {string} userId Идентификатор пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletsUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsWallet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletsUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.walletsUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Вывести средства с кошелька пользователя
         * @summary Withdraw funds
         * @param {ControllersWithdrawData} body Запрос на вывод средств
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawPost(body: ControllersWithdrawData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersWithdrawResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.withdrawPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletsApi - factory interface
 * @export
 */
export const WalletsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletsApiFp(configuration)
    return {
        /**
         * Получить баланс кошелька пользователя
         * @summary Get wallet balance
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBalanceGet(telegramId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsWalletBalance> {
            return localVarFp.walletBalanceGet(telegramId, options).then((request) => request(axios, basePath));
        },
        /**
         * Купить индекс для пользователя
         * @summary Buy index
         * @param {ControllersBuyIndexData} body Запрос на покупку индекса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBuyindexPost(body: ControllersBuyIndexData, options?: RawAxiosRequestConfig): AxiosPromise<ControllersBuyIndexResponse> {
            return localVarFp.walletBuyindexPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить средства пользователя из кошелька
         * @summary Get wallet funds
         * @param {number} telegramId Telegram ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletFundsGet(telegramId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsFund>> {
            return localVarFp.walletFundsGet(telegramId, options).then((request) => request(axios, basePath));
        },
        /**
         * Продать индекс для пользователя
         * @summary Sell index
         * @param {ControllersSellIndexRequest} body Запрос на продажу индекса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletSellindexPost(body: ControllersSellIndexRequest, options?: RawAxiosRequestConfig): AxiosPromise<ControllersSellIndexResponse> {
            return localVarFp.walletSellindexPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить транзакции пользователя
         * @summary Get wallet transactions
         * @param {number} telegramId Telegram ID пользователя
         * @param {number} [limit] Максимальное количество транзакций (по умолчанию 20)
         * @param {number} [offset] Смещение для пагинации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionsGet(telegramId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsTransaction>> {
            return localVarFp.walletTransactionsGet(telegramId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список кошельков пользователя
         * @summary Get user wallets
         * @param {string} userId Идентификатор пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletsUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsWallet>> {
            return localVarFp.walletsUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Вывести средства с кошелька пользователя
         * @summary Withdraw funds
         * @param {ControllersWithdrawData} body Запрос на вывод средств
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawPost(body: ControllersWithdrawData, options?: RawAxiosRequestConfig): AxiosPromise<ControllersWithdrawResponse> {
            return localVarFp.withdrawPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
export class WalletsApi extends BaseAPI {
    /**
     * Получить баланс кошелька пользователя
     * @summary Get wallet balance
     * @param {number} telegramId Telegram ID пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public walletBalanceGet(telegramId: number, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).walletBalanceGet(telegramId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Купить индекс для пользователя
     * @summary Buy index
     * @param {ControllersBuyIndexData} body Запрос на покупку индекса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public walletBuyindexPost(body: ControllersBuyIndexData, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).walletBuyindexPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить средства пользователя из кошелька
     * @summary Get wallet funds
     * @param {number} telegramId Telegram ID пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public walletFundsGet(telegramId: number, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).walletFundsGet(telegramId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Продать индекс для пользователя
     * @summary Sell index
     * @param {ControllersSellIndexRequest} body Запрос на продажу индекса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public walletSellindexPost(body: ControllersSellIndexRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).walletSellindexPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить транзакции пользователя
     * @summary Get wallet transactions
     * @param {number} telegramId Telegram ID пользователя
     * @param {number} [limit] Максимальное количество транзакций (по умолчанию 20)
     * @param {number} [offset] Смещение для пагинации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public walletTransactionsGet(telegramId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).walletTransactionsGet(telegramId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список кошельков пользователя
     * @summary Get user wallets
     * @param {string} userId Идентификатор пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public walletsUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).walletsUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Вывести средства с кошелька пользователя
     * @summary Withdraw funds
     * @param {ControllersWithdrawData} body Запрос на вывод средств
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public withdrawPost(body: ControllersWithdrawData, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).withdrawPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



